package org.opennms.netmgt.correlation.drools;

import java.util.Date;

import org.opennms.core.utils.InetAddressUtils;
import org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.events.api.EventConstants;
import org.opennms.netmgt.model.events.EventUtils;

global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;
global org.opennms.netmgt.correlation.drools.NodeService nodeService;
global java.lang.Integer IFACE_DOWN_HOLDDOWN_TIME;


declare InterfaceDownSituation
	node : Long
	interface : String
	timerId : Integer
end

rule "interfaceDown event received"
	salience 100
	when
		$e : Event( $uei : uei == "uei.opennms.org/nodes/interfaceDown", $nodeid : nodeid, $ipaddr : interface )
		not( InterfaceDownSituation( node == $nodeid, interface == $ipaddr ) )
	then
		retract( $e );
		InterfaceDownSituation situation = new InterfaceDownSituation();
		situation.setNode( $nodeid );
		situation.setInterface( $ipaddr );
		situation.setTimerId( engine.setTimer( IFACE_DOWN_HOLDDOWN_TIME ) );
		insert( situation );
		println( "Found interfaceDown event for node " + $nodeid +"/" + $ipaddr + ". Inserted new situation " + situation + " and retracted event." );
end

rule "interfaceUp event received for iface with existing interfaceDown situation"
	salience 100
	when
		$e : Event( $uei : uei == "uei.opennms.org/nodes/interfaceUp", $nodeid : nodeid, $ipaddr : interface )
		$situation : InterfaceDownSituation( node == $nodeid, interface == $ipaddr )
	then
		retract( $e );
		retract( $situation );
		println( "Found interfaceUp event for node/iface with InterfaceDownSituation " + $situation + ". Retracted interfaceUp and situation. End of line." );
end

rule "timer expired on an InterfaceDownSituation"
	salience 1000
	when
		$expiration : TimerExpired( $timerId : id )
		$situation : InterfaceDownSituation( timerId == $timerId, $nodeid : node, $ipaddr : interface )
	then
		println( "Hold-down timer expired for InterfaceDownSituation " + $situation + ".  Retracting expiration and situation; sending escalation event" );
		retract( $expiration );
		retract( $situation );
		sendVerifiedInterfaceDownEvent( engine, $nodeid, $ipaddr, IFACE_DOWN_HOLDDOWN_TIME );
end


function void sendVerifiedInterfaceDownEvent( DroolsCorrelationEngine engine, Long nodeId, String ipAddr, Integer holdDownTime ) {
		Integer holdDownTimeSec = holdDownTime / 1000;
    EventBuilder bldr = new EventBuilder("uei.opennms.org/nodes/correlation/interfaceDownPastHoldDownTime", "Drools")
    .setNodeid(nodeId.intValue())
    .setInterface(InetAddressUtils.addr(ipAddr))
		.addParam("correlationEngineName", "Drools")
		.addParam("correlationRuleSetName", engine.getName())
		.addParam("correlationComments", "Observed an interface-down situation enduring at least " + holdDownTimeSec + " seconds")
		.addParam("holdDownTime", holdDownTimeSec.toString());
        engine.sendEvent(bldr.getEvent());
}

function void println(Object msg) {
	System.out.println(new Date() + " : " + msg);
}
