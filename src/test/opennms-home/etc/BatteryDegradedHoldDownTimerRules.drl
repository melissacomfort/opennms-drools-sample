package org.opennms.netmgt.correlation.drools;

import java.util.Date;
import java.util.List;
import org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.xml.event.Parm;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.events.api.EventConstants;
import org.opennms.netmgt.model.events.EventUtils;


global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;
global org.opennms.netmgt.correlation.drools.NodeService nodeService;
global java.lang.Integer RAID_BATTERY_DEGRADED_HOLDDOWN_TIME;

declare Execution
	node : Long
    cucsFaultIndex: String
    timerId  : Integer
    parms: List
end

/*
 * Initial execution event  - send the initial translated event to generate notification
 */
rule "cucsFaultActiveNotifMINOR"
    salience 100
    when
        $e : Event( $uei : uei == "uei.opennms.org/vendor/Cisco/traps/cucsFaultActiveNotifMINOR", $nodeid : nodeid, $parms : parmCollection)
        not( Execution( node == $nodeid, cucsFaultIndex == getFaultIndex($e)) )
    then
        retract( $e );
		Execution execution = new Execution();
		execution.setNode( $nodeid );
		execution.setCucsFaultIndex(getFaultIndex($e));
        execution.setParms($parms );
        execution.setTimerId(engine.setTimer(RAID_BATTERY_DEGRADED_HOLDDOWN_TIME ) );
        insert(execution);
        println( "Found cucsFaultActiveNotifMINOR expiration for " + $uei + " for node " + $nodeid  + getFaultIndex($e) +". Inserted new execution " + execution + " and retracted event.");
end

rule "cucsFaultClearNotifCLEAR"
   salience 100
   when
       $e : Event( $uei : uei == "uei.opennms.org/vendor/Cisco/traps/cucsFaultClearNotifCLEAR", $nodeid : nodeid, $parms: parmCollection)
       $execution : Execution( node == $nodeid, cucsFaultIndex == getFaultIndex($e))
   then
       retract( $e );
       retract( $execution );
       println( "Found cucsFaultClearNotifCLEAR event for service "  + $uei + " for node " + $nodeid + getFaultIndex($e) + $execution);
end;

rule "cucsFaultActiveNotifRAID_BATTERY_DEGRADED"
   salience 1000
   when
     $expiration : TimerExpired( $timerId : id )
     $execution : Execution(timerId == $timerId, $nodeid : node, $parms : parms)
   then
       println( "Hold-down timer expired for cucsFaultActiveNotifMINOR " + $execution + ".  Retracting expiration and situation; sending escalation event" );
       retract( $expiration );
       retract( $execution );
       sendCucsFaultActiveNotifRAID_BATTERY_DEGRADED( engine, $nodeid ,$parms, RAID_BATTERY_DEGRADED_HOLDDOWN_TIME );


end

function void sendCucsFaultActiveNotifRAID_BATTERY_DEGRADED( DroolsCorrelationEngine engine, Long nodeId, List parms, Integer holdDownTime ) {
    Integer holdDownTimeSec = holdDownTime / 1000;
    EventBuilder bldr = new EventBuilder("uei.opennms.org/vendor/Cisco/correlator/cucsFaultActiveNotifRAID_BATTERY_DEGRADED", "Drools")
    .setNodeid(nodeId.intValue())
    .addParam("correlationEngineName", "Drools")
    .addParam("correlationRuleSetName", engine.getName())
    .addParam("correlationComments", "Observed Storage Raid Battery SLOT-4 Degraded enduring at least " + holdDownTimeSec + " seconds")
    .addParam("holdDownTime", holdDownTimeSec.toString());
    for (Object obj : parms) {
       println(obj);
       Parm p = (Parm) obj;
       bldr.addParam(p.getParmName(), p.getValue().getContent());
    }
    engine.sendEvent(bldr.getEvent());
}


function String getFaultIndex(Event e) {
   String faultIndex=null;

   Parm p=e.getParm("cucsFaultIndex");
   if(p!=null) {
	faultIndex=p.getValue().getContent();
   }
   return faultIndex;
}

function void println(Object msg) {
    System.out.println(new Date() + " : " + msg);
}
