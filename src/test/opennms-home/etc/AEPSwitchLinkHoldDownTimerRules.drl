package org.opennms.netmgt.correlation.drools;

import java.util.Date;
import java.util.List;
import org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.xml.event.Parm;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.events.api.EventConstants;
import org.opennms.netmgt.model.events.EventUtils
import java.net.InetAddress;


global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;
global org.opennms.netmgt.correlation.drools.NodeService nodeService;
global java.lang.Integer AVAES_LINH_DOWN_HOLDDOWN_TIME;

declare ConnLinkDownSituation
  node : Long
  iface : String
  parms: List
  timerId: Integer
  severity : String
end

rule "avAesAepConnLinkDown received on inteface"
    salience 100
    when
          $e : Event( $uei :uei=="uei.opennms.org/vendor/Avaya/traps/avAesAepConnLinkDownMAJOR" || uei=="uei.opennms.org/vendor/Avaya/traps/avAesAepConnLinkDownMINOR" || uei=="uei.opennms.org/vendor/Avaya/traps/avAesAepConnLinkDownWARNING" , $nodeid : nodeid, $iface : interface, $parms : parmCollection )
          not( ConnLinkDownSituation( node==$nodeid, iface==$iface))
      then
          retract( $e );
          ConnLinkDownSituation connLinkDownSituation = new ConnLinkDownSituation();
          connLinkDownSituation.setNode( $nodeid );
          connLinkDownSituation.setIface( $iface );
          connLinkDownSituation.setParms($parms );
          String alSeverity = getVbvalue($e);
          connLinkDownSituation.setTimerId( engine.setTimer( AVAES_LINH_DOWN_HOLDDOWN_TIME ) );
          connLinkDownSituation.setSeverity(alSeverity);
          insert( connLinkDownSituation );
          println( "Found avAesAepConnLinkDown Alarm when no situation exist  for " + $uei + " for node " + $nodeid  + ". Inserted new situation " + connLinkDownSituation + " and retracted event.");
end


rule "avAesAepConnLinkDown received when a situation exist"
    salience 100
    when
        $e : Event( $uei :uei=="uei.opennms.org/vendor/Avaya/traps/avAesAepConnLinkDownMAJOR" || uei=="uei.opennms.org/vendor/Avaya/traps/avAesAepConnLinkDownMINOR" || uei=="uei.opennms.org/vendor/Avaya/traps/avAesAepConnLinkDownWARNING", $nodeid : nodeid, $iface : interface, $parms : parmCollection )
        $situation: ConnLinkDownSituation(node==$nodeid, iface==$iface)
    then
        retract( $e );
        ConnLinkDownSituation situation = updateSeverity($situation, $e);
        update(situation );
        println( "Found avAesAepConnLinkDown when a situation exist for " + $uei + " for node " + $nodeid  + " Retracted event.");
    end

rule "avAesAepConnLinkDownCleared received for node on interace with existing situation"
      when
          $e : Event( $uei : uei=="uei.opennms.org/vendor/Avaya/traps/avAesAepConnLinkDownCLEARED", $nodeid : nodeid, $iface : interface, $parms : parmCollection )
          $situation: ConnLinkDownSituation(node==$nodeid, iface==$iface)
      then
          retract( $e );
          retract( $situation );
          println( "Found avAesAepConnLinkDownCLEARED Alarm  on interface: " + $iface + " of avAesAepConnLinkDown situation  " + $situation + " Retracted event.");
end


rule "avAesAepConnLinkDownCleared received with no situation"
	salience 90
	when
		$e : Event( $uei : uei=="uei.opennms.org/vendor/Avaya/traps/avAesAepConnLinkDownCLEARED", $nodeid : nodeid, $iface : interface, $parms : parmCollection )
		not(ConnLinkDownSituation(node==$nodeid, iface==$iface))
	then
		retract( $e );
		println( "Found avAesAepConnLinkDownCLEARED on interface " + $iface + " with no Situation. Retracted event." );
end

rule "avAesAepConnLinkDown timer expired"
   salience 100
   when
       $expiration : TimerExpired( $timerId : id )
       $situation  : ConnLinkDownSituation(timerId == $timerId, $nodeid : node, $iface : iface)
   then
       println( "Hold-down timer expired for avAesAepConnLinkDown " + $situation + ".  Retracting expiration and situation; sending escalation event" );
       retract( $expiration );
       retract( $situation );
       sendAvAesAepConnLinkDown(engine, $nodeid , AVAES_LINH_DOWN_HOLDDOWN_TIME, $situation );
end

function void sendAvAesAepConnLinkDown( DroolsCorrelationEngine engine, Long nodeId, Integer holdDownTime, ConnLinkDownSituation situation ) {
    String newUei = getUei(situation);
    println("UEI: " + newUei);
    EventBuilder bldr = new EventBuilder(newUei, "Drools")
    .setNodeid(nodeId.intValue())
    .setInterface(InetAddress.getByName(situation.getIface()));
    for (Object obj : situation.getParms()) {
       println(obj);
       Parm p = (Parm) obj;
       bldr.addParam(p.getParmName(), p.getValue().getContent());
    }
       engine.sendEvent(bldr.getEvent());
}

function String getUei(ConnLinkDownSituation situation){
 String currentSeverity = situation.getSeverity();
  if(currentSeverity.equals("6")){
     return "uei.opennms.org/vendor/Avaya/correlator/avAesAepConnLinkDown_Warning";
  }else if (currentSeverity.equals("5")){
     return "uei.opennms.org/vendor/Avaya/correlator/avAesAepConnLinkDown_Minor";
  }else {
     return "uei.opennms.org/vendor/Avaya/correlator/avAesAepConnLinkDown_Major";
  }
}

function ConnLinkDownSituation updateSeverity( ConnLinkDownSituation situation, Event e ) {
	String situationSeverity = situation.getSeverity();
	String currentSeverity = getVbvalue(e);

	println("Update situation severity: " + situationSeverity);

	if (Integer.parseInt(situationSeverity) > Integer.parseInt(currentSeverity)){
	    situationSeverity = currentSeverity;
    }
	println("Update current alarm severity: " + situationSeverity);

	situation.setSeverity( situationSeverity );
	return situation;
}

function String getVbvalue(Event e) {
   return e.getParm("csAlarmSeverity").getValue().getContent();
}

function void println(Object msg) {
    System.out.println(new Date() + " : " + msg);
}
