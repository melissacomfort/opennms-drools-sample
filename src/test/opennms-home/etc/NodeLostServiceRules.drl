package org.opennms.netmgt.correlation.drools;

import java.net.InetAddress;
import java.util.Date;
import java.util.List;

import org.opennms.core.utils.InetAddressUtils;
import org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.xml.event.Parm;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.events.api.EventConstants;
import org.opennms.netmgt.model.events.EventUtils
import java.util.ArrayList

global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;
global org.opennms.netmgt.correlation.drools.NodeService nodeService;
global java.lang.Integer NLS_HOLDDOWN_TIME;

/*
 * 11)  (Action triggering) If nodeLostService happens
 * Then wait 1 minute
 * If succeeds during that time then disregard
 * Else generate event that has alarm-data and will be forwarded by NBIs
 */


declare NodeLostServiceSituation
    node : Long
    iface : String
    service : String
    parms : List
    timerId : Integer
    orgsev : String
end

rule "nodeLostService event received for node for service on interface"
	salience 100
	when
		$e : Event( $uei : uei == "uei.opennms.org/nodes/nodeLostService", $nodeid : nodeid, $iface : interface, $service : service, $parms : parmCollection, $severity : severity )
		not( NodeLostServiceSituation( node == $nodeid, iface == $iface, service == $service ) )
		Boolean(booleanValue == false) from isServiceIgnored($service)
	then
            retract($e);
            NodeLostServiceSituation situation = new NodeLostServiceSituation();
            situation.setNode($nodeid );
            situation.setIface($iface);
            situation.setService( $service );
            situation.setParms( $parms );
            situation.setTimerId( engine.setTimer( NLS_HOLDDOWN_TIME ) );
            situation.setOrgsev($severity);
            insert(situation );
            println( "Found nodeLostService event for service " + $service + " on interface " + $iface + " of node " + $nodeid + " . Inserted new situation " + situation + " and retracted event." );
end

rule "nodeRegainedService event received for node for service on interface with existing nodeLostService situation"
	salience 100
	when
		$e : Event( $uei : uei == "uei.opennms.org/nodes/nodeRegainedService", $nodeid : nodeid, $iface : interface, $service : service)
		$situation : NodeLostServiceSituation( node == $nodeid, iface == $iface, service == $service )
		Boolean(booleanValue == false) from isServiceIgnored($service)
	then
		retract( $e );
		retract( $situation );
		println( "Found nodeRegainedService event for service " + $service + " on interface " + $iface + " of node with NodeLostServiceSituation " + $situation + ". Retracted nodeLostService and situation. End of line." );
end

rule "nodeRegainedService event with no situation"
	salience 90
	when
		$e : Event( $uei : uei == "uei.opennms.org/nodes/nodeRegainedService", $nodeid : nodeid, $iface : interface, $service : service)
		not(NodeLostServiceSituation( node == $nodeid, iface == $iface, service == $service ))
	then
		retract( $e );
		println( "Found nodeRegainedService event for service " + $service + " on interface " + $iface + " of node with no NodeLostServiceSituation. Retracted event." );
end

rule "timer expired on a NodeLostServiceSituation"
	salience 1000
	when
		$expiration : TimerExpired( $timerId : id )
		$situation : NodeLostServiceSituation( timerId == $timerId, $nodeid : node, $iface : iface, $service : service, $parms : parms)
	then
		println( "Hold-down timer expired for NodeLostServiceSituation " + $situation + ".  Retracting expiration and situation; sending escalation event" );
		retract( $expiration );
		retract( $situation );
		sendVerifiedNodeLostServiceEvent( engine, $nodeid, $iface, $service, $parms, NLS_HOLDDOWN_TIME, $situation.getOrgsev() );
end


function void sendVerifiedNodeLostServiceEvent( DroolsCorrelationEngine engine, Long nodeId, String iface, String service, List parms, Integer holdDownTime, String orgSeverity) {
    Integer holdDownTimeSec = holdDownTime / 1000;
    EventBuilder bldr = new EventBuilder("uei.opennms.org/nodes/correlation/nodeLostServicePastHoldDownTime", "Drools")
    .setNodeid(nodeId.intValue())
    .setInterface(InetAddress.getByName(iface))
    .setService(service)
    .setSeverity(orgSeverity)
    .addParam("correlationEngineName", "Drools")
    .addParam("correlationRuleSetName", engine.getName())
    .addParam("correlationComments", "Observed a node lost service situation enduring at least " + holdDownTimeSec + " seconds")
    .addParam("holdDownTime", holdDownTimeSec.toString());
    for (Object obj : parms) {
        println(obj);
        Parm p = (Parm) obj;
        bldr.addParam(p.getParmName(), p.getValue().getContent());
    }
    println("Send Event: " + bldr.getEvent());
    engine.sendEvent(bldr.getEvent());
}

function void println(Object msg) {
	System.out.println(new Date() + " : " + msg);
}

function boolean isServiceIgnored(String serviceName){
    boolean isIgnoreSrv = false;
    List<String> ignoreServices = getIgnoreServiceList();
    if (ignoreServices.contains(serviceName)){
        isIgnoreSrv = true;
    }
    return isIgnoreSrv;
}

function List<String> getIgnoreServiceList(){
   List<String> ignoreServList = new ArrayList<String>();
   ignoreServList.add("Cisco RTMT Reporter Servlet");
   ignoreServList.add("A Cisco DB");
   ignoreServList.add("A Cisco DB Replicator");
   ignoreServList.add("Host Resources Agent");
   ignoreServList.add("System Application Agent");
   ignoreServList.add("Cisco Database Layer Monitor");
   ignoreServList.add("Cisco CallManager Serviceability");
   ignoreServList.add("Cisco CDP Agent");
   ignoreServList.add("Cisco RIS Data Collector");
   ignoreServList.add("Cisco CDP");
   ignoreServList.add("MIB2 Agent");
   ignoreServList.add("Cisco Tomcat");
   ignoreServList.add("Cisco CallManager Serviceability RTMT");
   ignoreServList.add("SSH");
   ignoreServList.add("SNMP");

   return ignoreServList;
}

