package org.opennms.netmgt.correlation.drools;

import java.net.InetAddress;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

import org.opennms.core.utils.InetAddressUtils;
import org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.xml.event.Parm;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.events.api.EventConstants;
import org.opennms.netmgt.model.events.EventUtils;

global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;
global org.opennms.netmgt.correlation.drools.NodeService nodeService;

global java.lang.Integer NODE_LOST_SERVICE_HOLDDOWN_TIME;

declare Execution
  node : Long
  iface : String
  service : String
  parms: List
  timerId: Integer
end

/*
 * Initial execution event  - send the initial translated event to generate notification
 */
rule "nodeLostService event received for node"
  salience 100
  when
    $e : Event( $uei : uei == "uei.opennms.org/nodes/nodeLostService", $nodeid : nodeid, $iface : interface, $service : service)
    not( Execution( node == $nodeid, iface == $iface, service == $service))
  then
    retract( $e );
		Execution execution = new Execution();
		execution.setNode( $nodeid );
		execution.setIface( $iface );
		execution.setService($service);
		execution.setTimerId(engine.setTimer(NODE_LOST_SERVICE_HOLDDOWN_TIME) );
    insert(execution);
    println( "Found service down expiration for service " + $service +" on interface " + $iface +" of node with service down" + execution + " Retracted event.");
end

rule "Node Regained Service event received for node"
	salience 100
	when
		$e : Event( $uei : uei == "uei.opennms.org/nodes/nodeGainedService", $nodeid : nodeid, $iface : interface, $service : service )
		$situation : Execution( node == $nodeid, iface == $iface, service == $service )
	then
		retract( $e );
		retract( $situation );
		println( "Found Regained service " + $service +" on interface " + $iface +" of node with node lost service " + $situation+ " Retracted event.");
end

rule "Node Lost services timer expired"
   salience 1000
   when
     $expiration : TimerExpired( $timerId : id )
     $execution : Execution(timerId == $timerId, $nodeid : node, $iface : iface, $service : service)
   then
       println( "Hold-down timer expired for "  + $execution + ".  Retracting expiration;  sending escalation event" );
       retract( $expiration );
       retract( $execution );
       sendVerifiedNodeLostServiceEvent( engine, $nodeid, $iface, $service,  NODE_LOST_SERVICE_HOLDDOWN_TIME );
end

function void sendVerifiedNodeLostServiceEvent( DroolsCorrelationEngine engine, Long nodeId, String iface, String service, Integer holdDownTime ) {
  Integer holdDownTimeSec = holdDownTime / 1000;
  EventBuilder bldr = new EventBuilder("uei.opennms.org/nodes/correlation/nodeLostServicePastHoldDownTime", "Drools")
  .setNodeid(nodeId.intValue())
  .setInterface(InetAddress.getByName(iface))
  .setService(service)
	.addParam("correlationEngineName", "Drools")
	.addParam("correlationRuleSetName", engine.getName())
	.addParam("correlationComments", "Observed a service is passed " + holdDownTimeSec + " seconds")
	.addParam("holdDownTime", holdDownTimeSec.toString());
   engine.sendEvent(bldr.getEvent());
}

function void println(Object msg) {
    System.out.println(new Date() + " : " + msg);
}
