package org.opennms.netmgt.correlation.drools;

import java.net.InetAddress;
import java.util.Date;
import java.util.List;

import org.opennms.core.utils.InetAddressUtils;
import org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.xml.event.Parm;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.events.api.EventConstants;
import org.opennms.netmgt.model.events.EventUtils

global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;
global org.opennms.netmgt.correlation.drools.NodeService nodeService;
global java.lang.Integer ND_HOLDDOWN_TIME;

/*
 * 11)  (Action triggering) If nodeDown happens
 * Then wait 1 minute
 * If succeeds during that time then disregard
 * Else generate event that has alarm-data and will be forwarded by NBIs
 */


declare NodeDownSituation
    node : Long
    timerId : Integer
end

rule "nodeDown event received for node"
	salience 100
	when
		$e : Event( $uei : uei == "uei.opennms.org/nodes/nodeDown", $nodeid : nodeid )
		not( NodeDownSituation( node == $nodeid ) )
	then
            retract($e);
            NodeDownSituation situation = new NodeDownSituation();
            situation.setNode($nodeid );
            situation.setTimerId( engine.setTimer( ND_HOLDDOWN_TIME ) );
            insert(situation );
            println( "Found nodeDown event for node " + $nodeid + ". Inserted new situation " + situation + " and retracted event." );
end

rule "nodeUp event received for node with existing nodeDown situation"
	salience 100
	when
		$e : Event( $uei : uei == "uei.opennms.org/nodes/nodeUp", $nodeid : nodeid)
		$situation : NodeDownSituation( node == $nodeid )
	then
		retract( $e );
		retract( $situation );
		println( "Found nodeUp event for node with NodeDownSituation " + $situation + ". Retracted event and situation. End of line." );
end

rule "nodeUp event with no situation"
	salience 90
	when
		$e : Event( $uei : uei == "uei.opennms.org/nodes/nodeUp", $nodeid : nodeid)
		not(NodeDownSituation( node == $nodeid ))
	then
		retract( $e );
		println( "Found nodeUp event for node with no NodeDownSituation. Retracted event." );
end

rule "timer expired on a NodeDownSituation"
	salience 1000
	when
		$expiration : TimerExpired( $timerId : id )
		$situation : NodeDownSituation( timerId == $timerId, $nodeid : node)
	then
		println( "Hold-down timer expired for NodeDownSituation " + $situation + ".  Retracting expiration and situation; sending escalation event" );
		retract( $expiration );
		retract( $situation );
		sendVerifiedNodeDownEvent( engine, $nodeid, ND_HOLDDOWN_TIME );
end


function void sendVerifiedNodeDownEvent( DroolsCorrelationEngine engine, Long nodeId, Integer holdDownTime) {
    Integer holdDownTimeSec = holdDownTime / 1000;
    EventBuilder bldr = new EventBuilder("uei.opennms.org/nodes/correlation/nodeDownPastHoldDownTime", "Drools")
    .setNodeid(nodeId.intValue());
    println("Send Event: " + bldr.getEvent());
    engine.sendEvent(bldr.getEvent());
}

function void println(Object msg) {
	System.out.println(new Date() + " : " + msg);
}

